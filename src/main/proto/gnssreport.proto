syntax = "proto3";

import "google/protobuf/timestamp.proto";

package gov.agilemeridian.gnss;

option java_outer_classname = "GnssReportProto";

// An object representing a GNSS report at a particular LAT/LON.

message GnssReport {

    //Identify device or user. Must be less than 10 characters.
    string callsign = 1;
    //Position of reading
    LatLng latLng = 2;
    //Altitude of reading
    float altitude = 3;
    //Timestamp of recorded sample
    google.protobuf.Timestamp sysTime = 4;
    //Array of measurements from constellations / bands
    repeated GNSSMeasurement measurements = 5;
}

// An object representing a latitude/longitude pair. This is expressed as a pair
// of doubles representing degrees latitude and degrees longitude. Unless
// specified otherwise, this must conform to the
// <a href="http://www.unoosa.org/pdf/icg/2012/template/WGS_84.pdf">WGS84
// standard</a>. Values must be within normalized ranges.
//
// Example of normalization code in Python:
//
//     def NormalizeLongitude(longitude):
//       """Wraps decimal degrees longitude to [-180.0, 180.0]."""
//       q, r = divmod(longitude, 360.0)
//       if r > 180.0 or (r == 180.0 and q <= -1.0):
//         return r - 360.0
//       return r
//
//     def NormalizeLatLng(latitude, longitude):
//       """Wraps decimal degrees latitude and longitude to
//       [-90.0, 90.0] and [-180.0, 180.0], respectively."""
//       r = latitude % 360.0
//       if r <= 90.0:
//         return r, NormalizeLongitude(longitude)
//       elif r >= 270.0:
//         return r - 360, NormalizeLongitude(longitude)
//       else:
//         return 180 - r, NormalizeLongitude(longitude + 180.0)
//
//     assert 180.0 == NormalizeLongitude(180.0)
//     assert -180.0 == NormalizeLongitude(-180.0)
//     assert -179.0 == NormalizeLongitude(181.0)
//     assert (0.0, 0.0) == NormalizeLatLng(360.0, 0.0)
//     assert (0.0, 0.0) == NormalizeLatLng(-360.0, 0.0)
//     assert (85.0, 180.0) == NormalizeLatLng(95.0, 0.0)
//     assert (-85.0, -170.0) == NormalizeLatLng(-95.0, 10.0)
//     assert (90.0, 10.0) == NormalizeLatLng(90.0, 10.0)
//     assert (-90.0, -10.0) == NormalizeLatLng(-90.0, -10.0)
//     assert (0.0, -170.0) == NormalizeLatLng(-180.0, 10.0)
//     assert (0.0, -170.0) == NormalizeLatLng(180.0, 10.0)
//     assert (-90.0, 10.0) == NormalizeLatLng(270.0, 10.0)
//     assert (90.0, 10.0) == NormalizeLatLng(-270.0, 10.0)
message LatLng {
    // The latitude in degrees. It must be in the range [-90.0, +90.0].
    double latitude = 1;

    // The longitude in degrees. It must be in the range [-180.0, +180.0].
    double longitude = 2;
}

message GNSSMeasurement {


    //Status of detections
    RfStatus rfStatus = 1;

    //Satellite ID
    int32 svId = 2;
    //Constellation
    Constellation constellation = 3;
    //dB
    float sNrdB = 4;
    //dB
    float agcdB = 5;
    //dB-hz
    float cn0DbHz = 6;
    //Carrier center frequency as reported by receiver
    float carrierFrequencyHz = 7;
    //Horitzontal Dilution of Precision
    float hDop = 8;
    //Vertical Dilution of Precision
    float vDop = 9;
}


enum RfStatus {
    //Unknown if initializing, calibrating, etc.
    UNKNOWN_STATUS = 0;
    OK = 1;
    JAMMED = 2;
    SPOOFED = 3;
}

enum Constellation {
    UNKNOWN = 0;
    GPS = 1;
    SBAS = 2;
    GLONASS =3;
    QZSS = 4;
    BEIDOU = 5;
    GALILEO = 6;
}